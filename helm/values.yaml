parseable:
  image:
    repository: containers.parseable.com/parseable/parseable
    tag: v1.6.3
    pullPolicy: Always
  ## object store can be local-store, s3-store, blob-store or gcs-store.
  store: local-store
  ## Set to true if you want to deploy Parseable in a HA mode (multiple ingestors)
  ## Please note that highAvailability is not supported in local mode
  highAvailability:
    enabled: false
    ingestor: 
      port: 8000
      podAnnotations: {}
      labels:
        app: parseable
        component: ingestor
      count: 3
      env: 
        RUST_LOG: warn
      ## Use this endpoint to send events to ingestors
      ## Console (UI) is available on the other service (that points to the query pod)
      service:
        type: ClusterIP
        port: 80
      readinessProbe:
        httpGet:
          path: /api/v1/readiness
          port: 8000
      resources:
        limits:
          cpu: 500m
          memory: 4Gi
        requests:
          cpu: 250m
          memory: 1Gi
  ## Add environment variables to the Parseable Deployment
  env:
    RUST_LOG: warn
  ## Enable to create a log stream and then add retention configuration
  ## for that log stream
  # logstream:
  #   - name: "vectordemo"
  #     retention:
  #       action: "delete"
  #       duration: "30d"
  #   - name: "fluentbitdemo"
  #     retention:
  #       action: "delete"
  #       duration: "30d"
  ## enable persistence using PVC for the Data and Staging directories
  ## Note that Data directory is needed only for local mode
  persistence:
    staging:
      enabled: false
      storageClass: ""
      accessMode: ReadWriteOnce
      size: 5Gi
    ingestor:
      enabled: false
      storageClass: ""
      accessMode: ReadWriteOnce
      size: 5Gi
    data:
      enabled: false
      storageClass: ""
      accessMode: ReadWriteOnce
      size: 5Gi
    querier:
      enabled: false
      storageClass: ""
      accessMode: ReadWriteOnce
      size: 5Gi
  ## comment out the secrets depending upon deployment option
  ## localModeSecret if store is set to local
  ## blobModeSecret if store is set to blob-store
  ## s3ModeSecret if store is set to s3-store
  localModeSecret:
    enabled: false
    secrets:
      - name: parseable-env-secret
        prefix: P_
        keys:
          - addr
          - username
          - password
          - staging.dir
          - fs.dir
  blobModeSecret:
    enabled: false
    secrets:
      - name: parseable-env-secret
        prefix: P_
        keys:
          - addr
          - username
          - password
          - azr.access_key
          - azr.account
          - azr.container
          - azr.url
  s3ModeSecret:
    enabled: false
    secrets:
      - name: parseable-env-secret
        prefix: P_
        keys:
          - addr
          - username
          - password
          - staging.dir
          - fs.dir
          - s3.url
          - s3.access.key
          - s3.secret.key
          - s3.bucket
          - s3.region
  gcsModeSecret:
    enabled: false
    secrets:
      - name: parseable-env-secret
        prefix: P_
        keys:
          - addr
          - username
          - password
          - staging.dir
          - fs.dir
          - gcs.url
          - gcs.access.key
          - gcs.secret.key
          - gcs.bucket
          - gcs.region
  serviceAccount:
    create: true
    name: "parseable"
    annotations: {}
  service:
    type: ClusterIP
    port: 80
  readinessProbe:
    httpGet:
      path: /api/v1/readiness
      port: 8000
  resources:
    limits:
      cpu: 500m
      memory: 4Gi
    requests:
      cpu: 250m
      memory: 1Gi
  ## works only when highAvailability is enabled
  ## Set it to true if you want to deploy Parseable 
  ## Query node with a sidecar
  sidecar:
    enabled: false
    image:
      repository: busybox
      tag: latest
      pullPolicy: IfNotPresent
    command: []
    args: []
    env: 
      RUST_LOG: warn
    ports: 8000
    volumeMounts:
      - name: test-volume
        mountPath: /parseable/test
    volumeClaimTemplates:
      - metadata:
          name: test-volume
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 1Gi
    resources:
      limits:
        cpu: 500m
        memory: 4Gi
      requests:
        cpu: 250m
        memory: 1Gi
  securityContext:
    allowPrivilegeEscalation: false
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
    prometheus.io/path: "/api/v1/metrics"
  podSecurityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    fsGroupChangePolicy: "Always"
  nameOverride: ""
  fullnameOverride: ""
  nodeSelector: {}
  affinity: {}
  podLabels:
    app: parseable
    component: query
  tolerations: []
  ## Use this section to create ServiceMonitor object for
  ## this Parseable deployment. Read more on ServiceMonitor
  ## here: https://prometheus-operator.dev/docs/api-reference/api/#monitoring.coreos.com/v1.ServiceMonitor
  metrics:
    serviceMonitor:
      enabled: false
      labels: {}
      namespace: ""
      spec:
        jobLabel: ""
        targetLabels: []
        podTargetLabels: []
        endpoints: []
        selector: {}
        namespaceSelector: {}
        sampleLimit: 0
        scrapeProtocols: []
        targetLimit: 0
        labelLimit: 0
        labelNameLengthLimit: 0
        labelValueLengthLimit: 0
        keepDroppedTargets: 0
        attachMetadata: {}
        scrapeClass: ""
        bodySizeLimit: {}

# Default values for Vector
# See Vector helm documentation to learn more:
# https://vector.dev/docs/setup/installation/package-managers/helm/
vector:
  enabled: false
  role: "Agent"
  rollWorkload: true
  image:
    repository: timberio/vector
    pullPolicy: IfNotPresent
    pullSecrets: []
    tag: ""
    sha: ""
  replicas: 1
  podManagementPolicy: OrderedReady
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    maxUnavailable:
  rbac:
    create: true
  serviceAccount:
    create: true
    annotations: {}
    name:
    automountToken: true
  podLabels:
    vector.dev/exclude: "true"
  args:
    - --config-dir
    - "/etc/vector/"
  terminationGracePeriodSeconds: 60
  service:
    enabled: true
    type: "ClusterIP"
    annotations: {}
    topologyKeys: []
    ports: []
    externalTrafficPolicy: ""
    loadBalancerIP: ""
    ipFamilyPolicy: ""
    ipFamilies: []
  serviceHeadless:
    enabled: true
  dnsPolicy: ClusterFirst
  customConfig:
    data_dir: /vector-data-dir
    api:
      enabled: true
      address: 127.0.0.1:8686
      playground: false
    sources:
      kubernetes_logs:
        type: kubernetes_logs
    sinks:
      parseable:
        type: http
        method: post
        batch:
          max_bytes: 10485760
          max_events: 1000
          timeout_secs: 10
        compression: gzip
        inputs:
          - kubernetes_logs
        encoding:
          codec: json
        uri: 'http://parseable.parseable.svc.cluster.local/api/v1/ingest'
        auth:
          strategy: basic
          user: admin
          password: admin
        request:
          headers:
            X-P-Stream: vectordemo
        healthcheck:
          enabled: true
          path: 'http://parseable.parseable.svc.cluster.local/api/v1/liveness'
          port: 80

# Default values for fluent-bit.
# See fluent-bit helm documentation to learn more:
# https://github.com/fluent/helm-charts/tree/main/charts/fluent-bit
fluent-bit:
  enabled: false
  kind: DaemonSet
  serverHost: parseable-ingestor-service.parseable.svc.cluster.local
  serverUsername: admin
  serverPassword: admin
  serverStream: $NAMESPACE
  excludeNamespaces: kube-system, default
  replicaCount: 1
  image:
    repository: parseable/fluent-bit
    tag: "v2"
    pullPolicy: Always
  testFramework:
    enabled: true
    image:
      repository: busybox
      pullPolicy: Always
      tag: latest
  serviceAccount:
    create: true
    annotations: {}
    name:
  rbac:
    create: true
    nodeAccess: false
    eventsAccess: true
  dnsPolicy: ClusterFirst
  service:
    type: ClusterIP
    port: 2020
    loadBalancerClass:
    loadBalancerSourceRanges: []
    labels: {}
  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /api/v1/health
      port: http
  flush: 1
  metricsPort: 2020
  ## https://docs.fluentbit.io/manual/administration/configuring-fluent-bit/classic-mode/configuration-file
  config:
    service: |
      [SERVICE]
          Daemon Off
          Flush {{ .Values.flush }}
          Log_Level {{ .Values.logLevel }}
          Parsers_File parsers.conf
          Parsers_File custom_parsers.conf
          HTTP_Server On
          HTTP_Listen 0.0.0.0
          HTTP_Port {{ .Values.metricsPort }}
          Health_Check On

    ## https://docs.fluentbit.io/manual/pipeline/inputs
    inputs: |
      [INPUT]
          Name tail
          Path /var/log/containers/*.log
          multiline.parser docker, cri
          Tag kube.*
          Mem_Buf_Limit 5MB
          Skip_Long_Lines On

      [INPUT]
          name kubernetes_events
          tag k8s_events

      [INPUT]
          Name systemd
          Tag host.*
          Systemd_Filter _SYSTEMD_UNIT=kubelet.service
          Read_From_Tail On

    ## https://docs.fluentbit.io/manual/pipeline/filters
    filters: |
      [FILTER]
          Name                kubernetes
          Match               kube.*
          Merge_Log           On
          Keep_Log            Off
          K8S-Logging.Parser  On
          K8S-Logging.Exclude On

    ## https://docs.fluentbit.io/manual/pipeline/outputs
    outputs: |
      [OUTPUT]
          Name parseable
          Match kube.*
          Server_Host {{ .Values.serverHost }}
          Username {{ .Values.serverUsername }}
          Password {{ .Values.serverPassword }}
          Server_Port 80
          Stream {{ .Values.serverStream }}
          Exclude_Namespaces {{ .Values.excludeNamespaces }}

      [OUTPUT]
          Name parseable
          Match k8s_events
          Server_Host {{ .Values.serverHost }}
          Server_Port 80
          Username {{ .Values.serverUsername }}
          Password {{ .Values.serverPassword }}
          Stream k8s-events 

    upstream: {}

    customParsers: |
      [PARSER]
          Name docker_no_time
          Format json
          Time_Keep Off
          Time_Key time
          Time_Format %Y-%m-%dT%H:%M:%S.%L
  # The config volume is mounted by default, either to the existingConfigMap value, or the default of "fluent-bit.fullname"
  volumeMounts:
    - name: config
      mountPath: /fluent-bit/etc/fluent-bit.conf
      subPath: fluent-bit.conf
    - name: config
      mountPath: /fluent-bit/etc/custom_parsers.conf
      subPath: custom_parsers.conf
  daemonSetVolumes:
    - name: varlog
      hostPath:
        path: /var/log
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
    - name: etcmachineid
      hostPath:
        path: /etc/machine-id
        type: File
  daemonSetVolumeMounts:
    - name: varlog
      mountPath: /var/log
    - name: varlibdockercontainers
      mountPath: /var/lib/docker/containers
      readOnly: true
    - name: etcmachineid
      mountPath: /etc/machine-id
      readOnly: true
  logLevel: info
